{"meta":{"title":"Chang Zihao","subtitle":null,"description":null,"author":"Chang Zihao","url":"http://changzihao.me"},"pages":[{"title":"","date":"2018-02-02T03:05:42.000Z","updated":"2018-02-02T02:20:08.000Z","comments":true,"path":"tags/index.html","permalink":"http://changzihao.me/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-02-02T03:05:42.000Z","updated":"2017-11-17T09:58:02.000Z","comments":true,"path":"categories/index.html","permalink":"http://changzihao.me/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"qemu运行riscv linux","slug":"qemu-run-riscv","date":"2018-01-29T07:48:18.000Z","updated":"2018-02-02T02:11:21.000Z","comments":true,"path":"2018/01/29/qemu-run-riscv/","link":"","permalink":"http://changzihao.me/2018/01/29/qemu-run-riscv/","excerpt":"","text":"qemu运行riscv linux过程：在物理服务器上安装qemu模拟器，模拟器中运行基于riscv指令集编译的linux镜像文件。 工具集合： riscv-qemu（模拟器，可以模拟运行riscv指令集的程序或镜像） riscv-tools（基于riscv指令集的交叉编译工具） riscv-pk（用于包装内核文件vmlinux） busybox(用于给linux镜像安装基本命令，如ls，cat，mv等等) 一、从零开始首先创建一个工作目录叫做$TOP,进入工作目录，并将设定$TOP环境变量 123$ mkdir riscv$ cd riscv$ $ export TOP=$(pwd) 二、安装riscv-toolchain1 . 下载交叉编译工具: 123$ git clone https://github.com/riscv/riscv-tools.git$ cd $TOP/riscv-tools$ git submodule update --init --recursive 2 . 为了编译gcc，我们需要安装一些其他的依赖库，包括 flex, bison, autotools, libmpc, libmpfr, and libgmp. Ubuntu系统可以通过如下命令安装： 1$ sudo apt-get install autoconf automake autotools-dev curl device-tree-compiler libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf 3 . 在开始安装之前，需要设置$RISCV,$PATH环境变量，这些环境变量会在整个安装过程中使用: 12$ export RISCV=$TOP/riscv #将作为所有工具的安装路径 --prefix=$RISCV$ export PATH=$PATH:$RISCV/bin 4 . 安装spike工具: 1$ ./build-spike-only.sh 5 . 编译 riscv64-unknown-linux-gnu-gcc: 12$ cd riscv-gnu-toolchain$ ./configure --prefix=$RISCV 这会将riscv64-unknown-linux-gnu-gcc与riscv64-unknown-elf-gcc工具一样安装到$RISCV，同时 $RISCV/bin已经被添加置PATH中，所以上述工具可以直接使用。 最后执行下面的指令，运行build: 1$ make linux 三、安装riscv-qemu1、安装qemu: 12345678$ cd $TOP$ git clone https://github.com/riscv/riscv-qemu.git$ cd riscv-qemu $ git submodule update --init pixman $ mkdir build$ cd build$ ../configure $ make 2、测试qemu的用户模式: 12$ riscv64-unknown-linux-gnu-gcc hello.c -o hello$ ./riscv64-linux-user/qemu-riscv64 -L $RISCV/sysroot hello 3、测试qemu的镜像模式:启动qemu，载入bbl示例镜像文件，下载地址:bblvmlinuxinitramfs_dynamic 1$ riscv-qemu/riscv64-softmmu/qemu-system-riscv64 -kernel /home/tank/bblvmlinuxinitramfs_dynamic -nographic 四、编译busybox1234567$ git clone https://github.com/mirror/busybox$ git checkout 1_28_stable$ cd busybox$ make allnoconfig$ make menuconfig #按照需求设定编译选项、交叉编译工具$ make ARCH=riscv menuconfig #设置交叉编译工具、编译选项、inittab等$ make -j8 CONFIG_STATIC=y, listed as “Build BusyBox as a static binary (no shared libs)” in BusyBox Settings → Build Options CONFIG_CROSS_COMPILER_PREFIX=riscv64-unknown-linux-gnu-, listed as “Cross Compiler prefix” in BusyBox Settings → Build Options CONFIG_FEATURE_INSTALLER=y, listed as “Support –install [-s] to install applet links at runtime” in BusyBox Settings → General Configuration CONFIG_INIT=y, listed as “init” in Init utilities CONFIG_ASH=y, listed as “ash” in Shells CONFIG_ASH_JOB_CONTROL=n, listed as “Ash → Job control” in Shells CONFIG_MOUNT=y, listed as “mount” in Linux System Utilities CONFIG_FEATURE_USE_INITTAB=y, listed as “Support reading an inittab file” in Init Utilities 编译完成后会在busybox目录下生成busybox二进制执行文件 五、编译riscv-linux1 . 获取内核代码: 123$ cd $TOP$ git clone https://github.com/riscv/riscv-linux.git riscv-linux$ cd riscv-linux 2 . 准备一个文件系统初始化文件，命名为initramfs.txt,可以在其中创建任意想要的文件夹文件，如下是我的文件系统样例： 1234567891011121314151617dir /dev 755 0 0nod /dev/console 644 0 0 c 5 1nod /dev/null 644 0 0 c 1 3dir /proc 755 0 0dir /bin 755 0 0dir /tmp 755 0 0file /bin/busybox /path/to/your/busybox 755 0 0slink /init /bin/busybox 755 0 0dir /sbin 755 0 0dir /usr 755 0 0dir /usr/bin 755 0 0dir /usr/sbin 755 0 0dir /etc 755 0 0file /etc/inittab /path/to/your/inittab 644 0 0dir /lib 755 0 0 3 . 准备一份初始化表，命名为inittab,放置在内核的/etc目录下，如下是一个简单的inittab样例： 12345::sysinit:/bin/busybox mount -t proc proc /proc::sysinit:/bin/busybox mount -t tmpfs tmpfs /tmp::sysinit:/bin/busybox mount -o remount,rw /dev/htifblk0 /::sysinit:/bin/busybox --install -s/dev/console::sysinit:-/bin/ash 4 . 下面正式开始编译内核,首先配置编译选项: 1234$ make mrproper #很重要$ make ARCH=riscv defconfig$ make ARCH=riscv menuconfig #设置交叉编译工具、编译选项、initramfs等$ make -j8 ARCH=riscv 如果不执行make mrproper编译内核时可能出现缺少头文件错误 menuconfig : “General setup -&gt; Initial RAM Filesystem…” (CONFIG_BLK_DEV_INITRD=y) menuconfig : “General setup -&gt; Initramfs source files (CONFIG_INITRAMFS_SRC=/path/to/your/initramfs.txt) menuconfig : “General setup -&gt; Cross-compiler tool prefix (CONFIG_CROSS_COMPILER_PREFIX=riscv64-unknown-linux-gnu-) 六、启动qemu运行linux镜像所有准备工作完成，下面开始运行linux镜像1 . 首先需要通过pk工具包中的bbl工具为linux kernel添加boot loader: 1234$ cd &lt;riscv-pk&gt;/build$ rm -rf *$ ../configure --prefix=$RISCV --host=riscv64-unknown-linux-gnu --with-payload=&lt;riscv-linux&gt;/vmlinux$ make bbl 2 . 接下来通过qemu运行上一步中生成的bbl文件: 1riscv-qemu/riscv64-softmmu/qemu-system-riscv64 -kernel &lt;riscv-pk&gt;/build/bbl -nographic 3 . 接下来你的屏幕上会想RV图像，通过你的制作的linux镜像也会通过qemu运行，因为我们已经在其中添加了busybox工具包，你可以执行例如ls、cd、pwd等指令。通过还可以将自己编写的c语言，g语言的程序通过riscv的工具链进行编译，然后按照样例修改initramfs.txt文件，将编译好的二进制文件加入到内核的文件系统中，然后重新从编译内核开始重新执行一遍上述过程，便可以在内核中运行你自己写的程序。 七、最后最后我想说的是，上述过程是一个非常繁琐的过程，你需要有足够的耐心以及足够运行，首先gcc工具链和内核的编译安装是一个非常费事的过程，不仅如此你还遇到各种各种莫名其妙的问题，其中各个工具链版本的匹配便是一个令人极度头痛的问题.博主足够幸运，在第一次运行上述过程中非常幸运的没有遇到版本不匹配的问题，希望诸位也能如此幸运。 八、最后的最后近期因为各种原因需要重新使用最新版本复现上述过程，耗时近3天遇到了各种各样的问题。最后，在师兄的提示下，选择了sifive公司的集成工具。完成上述工程只需要： 1234$ git clone --recursive https://github.com/sifive/freedom-u-sdk$ cd freedom-u-sdk$ make all$ make qemu 接下来你就会发现，自己之前所做的一切努力在别人看来只不过一个脚本就能解决，并且你不会想到sifive为你移植多少依赖库。。。最后给大家送上一个运行界面图（默认用户名为：root，密码为：sifive）： Alt text","categories":[{"name":"riscv","slug":"riscv","permalink":"http://changzihao.me/categories/riscv/"}],"tags":[{"name":"riscv","slug":"riscv","permalink":"http://changzihao.me/tags/riscv/"},{"name":"qemu","slug":"qemu","permalink":"http://changzihao.me/tags/qemu/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-11-16T08:35:52.000Z","updated":"2017-11-17T10:08:23.000Z","comments":true,"path":"2017/11/16/hello-world/","link":"","permalink":"http://changzihao.me/2017/11/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"http://changzihao.me/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://changzihao.me/tags/hexo/"}]}]}